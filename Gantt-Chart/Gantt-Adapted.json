{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "description": "Adapted Gantt Chart for Portfolio Management - Uses program/project structure with G0/G5 dates",
  "autosize": "pad",
  "padding": {
    "left": 5,
    "right": 0,
    "top": 5,
    "bottom": 0
  },
  "signals": [
    {
      "name": "height",
      "update": "pbiContainerHeight-65"
    },
    {
      "name": "width",
      "update": "pbiContainerWidth"
    },
    {
      "name": "showTooltips",
      "value": true
    },
    {
      "name": "showButtons",
      "value": true
    },
    {
      "name": "showDomainSpanLabel",
      "value": false
    },
    {
      "name": "startGrain",
      "value": "Days",
      "description": "Days, Months, Years or All"
    },
    {
      "name": "initPhaseState",
      "value": "open",
      "description": "open or close"
    },
    {
      "name": "textColour",
      "value": "#666666"
    },
    {
      "name": "coloursDark",
      "value": [
        "#377eb9",
        "#4db04a",
        "#974ea2",
        "#ff8000",
        "#e61a1d"
      ]
    },
    {
      "name": "coloursLight",
      "value": [
        "#a5c8e4",
        "#b5dfb3",
        "#d3b0d9",
        "#ffcc99",
        "#f5a3a5"
      ]
    },
    {
      "name": "yRowHeight",
      "value": 33,
      "description": "Height in pixels"
    },
    {
      "name": "yRowPadding",
      "value": 0.22,
      "description": "Row padding as % of yRowHeight (each side)"
    },
    {
      "name": "yPaddingInner",
      "update": "yRowPadding * yRowHeight"
    },
    {
      "name": "taskColumnWidth",
      "value": 155
    },
    {
      "name": "startColumnWidth",
      "value": 45
    },
    {
      "name": "endColumnWidth",
      "value": 45
    },
    {
      "name": "daysColumnWidth",
      "value": 35
    },
    {
      "name": "progressColumnWidth",
      "value": 55
    },
    {
      "name": "columnPadding",
      "value": 15
    },
    {
      "name": "oneDay",
      "update": "1000*60*60*24"
    },
    {
      "name": "timeoffset",
      "update": "timezoneoffset(data('dataset')[0]['g0Date']) * 60 *1000"
    },
    {
      "name": "dayBandwidth",
      "update": "scale('x', timeOffset('day', datetime(2000,1,1),1)) - scale('x', datetime(2000,1,1))"
    },
    {
      "name": "dayBandwidthRound",
      "update": "(round(dayBandwidth *100)/100)"
    },
    {
      "name": "minDayBandwidth",
      "value": 20
    },
    {
      "name": "minMonthBandwidth",
      "value": 3
    },
    {
      "name": "minYearBandwidth",
      "value": 0.95
    },
    {
      "name": "milestoneSymbolSize",
      "value": 400
    },
    {
      "name": "arrowSymbolSize",
      "value": 70
    },
    {
      "name": "phaseSymbolHeight",
      "update": "bandwidth('y')-yPaddingInner-5"
    },
    {
      "name": "phaseSymbolWidth",
      "value": 10
    },
    {
      "name": "columnsWidth",
      "update": "taskColumnWidth+startColumnWidth+endColumnWidth+daysColumnWidth+progressColumnWidth+(columnPadding*5)"
    },
    {
      "name": "ganttWidth",
      "update": "width-columnsWidth-minDayBandwidth"
    },
    {
      "name": "dayExt",
      "update": "[data('xExt')[0]['s']-oneDay,data('xExt')[0]['s']+ ((ganttWidth-minDayBandwidth)/minDayBandwidth)*oneDay]"
    },
    {
      "name": "monthExt",
      "update": "[data('xExt')[0]['s']-oneDay ,data('xExt')[0]['s'] + ganttWidth/2*oneDay]"
    },
    {
      "name": "yearExt",
      "update": "[data('xExt')[0]['s']-oneDay,data('xExt')[0]['s'] + ganttWidth/0.35*oneDay]"
    },
    {
      "name": "allExt",
      "update": "[data('xExt')[0]['s']-oneDay,data('xExt')[0]['e']+oneDay*9]"
    },
    {
      "name": "xExt",
      "update": "startGrain=='All'?allExt:startGrain=='Years'?yearExt:startGrain=='Months'?monthExt:dayExt"
    },
    {
      "name": "today",
      "update": "+datetime(year(now()),month(now()),date(now()))"
    },
    {
      "name": "todayRule",
      "update": "timeFormat(today,'%d/%m/%y')"
    },
    {
      "name": "zoom",
      "value": 1,
      "on": [
        {
          "events": "wheel!",
          "force": true,
          "update": "x()>columnsWidth?pow(1.001, (event.deltaY) * pow(16, event.deltaMode)):1"
        }
      ]
    },
    {
      "name": "xDomMinSpan",
      "update": "span(dayExt)"
    },
    {
      "name": "xDomMaxSpan",
      "update": "span(allExt)"
    },
    {
      "name": "xDom",
      "value": [
        0,
        0
      ],
      "on": [
        {
          "events": {
            "signal": "zoom"
          },
          "update": "[anchor + (xDom[0] - anchor) * zoom, anchor + (xDom[1] - anchor) * zoom]"
        }
      ]
    },
    {
      "name": "anchor",
      "value": 0,
      "on": [
        {
          "events": "wheel",
          "update": "+invert('x', x()-columnsWidth)"
        }
      ]
    },
    {
      "name": "xCur",
      "value": [
        0,
        0
      ],
      "on": [
        {
          "events": "pointerdown",
          "update": "slice(xDom)"
        }
      ]
    },
    {
      "name": "yCur",
      "value": [
        0,
        0
      ],
      "on": [
        {
          "events": "pointerdown",
          "update": "slice(yRange)"
        }
      ]
    },
    {
      "name": "delta",
      "value": [
        0,
        0
      ],
      "on": [
        {
          "events": [
            {
              "source": "window",
              "type": "pointermove",
              "consume": true,
              "between": [
                {
                  "type": "pointerdown"
                },
                {
                  "source": "window",
                  "type": "pointerup"
                }
              ]
            }
          ],
          "update": "down ? [down[0]-x(), y()-down[1]] : [0,0]"
        }
      ]
    },
    {
      "name": "down",
      "value": null,
      "on": [
        {
          "events": "pointerdown",
          "update": "xy()"
        },
        {
          "events": "pointerup",
          "update": "null"
        }
      ]
    },
    {
      "name": "phaseClicked",
      "value": null,
      "on": [
        {
          "events": "@taskSelector:click,@phaseOutline:click",
          "update": " yCur[0]==yRange[0] && yCur[1]==yRange[1]&& xCur[0]===xDom[0]&& xCur[1]===xDom[1] && datum.program==datum.project?  {program: datum.program}:null",
          "force": true
        },
        {
          "events": "@taskTooltips:click",
          "update": " yCur[0]==yRange[0] && yCur[1]==yRange[1]&& xCur[0]===xDom[0]&& xCur[1]===xDom[1] && datum.datum.program==datum.datum.project?  {program: datum.datum.program}:null",
          "force": true
        }
      ]
    },
    {
      "name": "itemHovered",
      "value": {
        "id": "",
        "dependencies": []
      },
      "on": [
        {
          "events": "@taskSelector:mouseover,@phaseOutline:mouseover,@milestoneSymbols:mouseover,@taskBars:mouseover,@taskNames:mouseover,@taskLabels:mouseover",
          "update": "{'id': toString(datum.id), 'dependencies':split(datum.dependencies,',')}"
        },
        {
          "events": "@taskTooltips:mouseover",
          "update": "{'id': toString(datum.datum.id), 'dependencies':split(datum.datum.dependencies,',')}"
        },
        {
          "events": "@taskSelector:mouseout,@phaseOutline:mouseout,@milestoneSymbols:mouseout,@taskBars:mouseout,@taskNames:mouseout,@taskLabels:mouseout,@taskTooltips:mouseout",
          "update": "{'id': '', 'dependencies':[]}"
        }
      ]
    },
    {
      "name": "hover",
      "value": "",
      "on": [
        {
          "events": "@buttonMarks:pointerover",
          "update": "datum.text?datum.text:''",
          "force": true
        },
        {
          "events": "@buttonMarks:pointerout",
          "update": "''",
          "force": true
        }
      ]
    },
    {
      "name": "closeAll",
      "on": [
        {
          "events": "@buttonMarks:click",
          "update": "datum.text=='Close'?true:false",
          "force": true
        }
      ]
    },
    {
      "name": "openAll",
      "on": [
        {
          "events": "@buttonMarks:click",
          "update": "datum.text=='Open'?true:false",
          "force": true
        }
      ]
    }
  ],
  "data": [
    {
      "name": "dataset",
      "values": [
        {
          "id": 1,
          "program": "Cloud Migration",
          "project": "AWS Infrastructure Setup",
          "g0Date": "01/03/2024",
          "g5Date": "15/06/2024",
          "completion": 50,
          "dependencies": ""
        },
        {
          "id": 2,
          "program": "Cloud Migration",
          "project": "Data Migration",
          "g0Date": "01/04/2024",
          "g5Date": "30/07/2024",
          "completion": 55,
          "dependencies": ""
        },
        {
          "id": 3,
          "program": "Cloud Migration",
          "project": "Application Modernization",
          "g0Date": "01/05/2024",
          "g5Date": "30/09/2024",
          "completion": 75,
          "dependencies": ""
        },
        {
          "id": 4,
          "program": "Security Enhancement",
          "project": "Zero Trust Implementation",
          "g0Date": "01/02/2024",
          "g5Date": "31/05/2024",
          "completion": 80,
          "dependencies": ""
        },
        {
          "id": 5,
          "program": "Security Enhancement",
          "project": "SIEM Integration",
          "g0Date": "01/06/2024",
          "g5Date": "31/10/2024",
          "completion": 100,
          "dependencies": ""
        }
      ],
      "format": {
        "parse": {"g0Date": "date:'%d/%m/%Y'", "g5Date": "date:'%d/%m/%Y'"}
      }
    },
    {
      "name": "input",
      "source": "dataset",
      "transform": [
        {
          "type": "formula",
          "as": "start",
          "expr": "+datetime(year(datum.g0Date),month(datum.g0Date),date(datum.g0Date),hours(datum.g0Date),minutes(datum.g0Date))"
        },
        {
          "type": "formula",
          "as": "end",
          "expr": "+datetime(year(datum.g5Date),month(datum.g5Date),date(datum.g5Date),hours(datum.g5Date),minutes(datum.g5Date))"
        },
        {
          "type": "formula",
          "as": "labelEnd",
          "expr": "datum.end"
        },
        {
          "type": "formula",
          "as": "end",
          "expr": "datetime(+datum.end+oneDay)"
        },
        {
          "type": "formula",
          "as": "days",
          "expr": "round(((datum.end-datum.start)/oneDay)*10)/10"
        },
        {
          "type": "formula",
          "as": "completionLabel",
          "expr": "datum.completion+'%'"
        },
        {
          "type": "window",
          "sort": {
            "field": "start",
            "order": "ascending"
          },
          "ops": [
            "rank"
          ],
          "as": [
            "taskSort"
          ],
          "groupby": [
            "program"
          ]
        },
        {
          "type": "formula",
          "as": "start",
          "expr": "+datum.start"
        },
        {
          "type": "formula",
          "as": "end",
          "expr": "+datum.end"
        }
      ]
    },
    {
      "name": "phases",
      "source": "input",
      "transform": [
        {
          "type": "aggregate",
          "fields": [
            "start",
            "end",
            "completion",
            "project",
            "completion",
            "labelEnd"
          ],
          "ops": [
            "min",
            "max",
            "sum",
            "count",
            "mean",
            "max"
          ],
          "as": [
            "start",
            "end",
            "sum",
            "count",
            "completion",
            "labelEnd"
          ],
          "groupby": [
            "program"
          ]
        },
        {
          "type": "formula",
          "as": "project",
          "expr": "datum.program"
        },
        {
          "type": "formula",
          "as": "taskSort",
          "expr": "0"
        },
        {
          "type": "formula",
          "as": "completion",
          "expr": "round(datum.completion)"
        },
        {
          "type": "formula",
          "as": "days",
          "expr": "round(((datum.end-datum.start)/oneDay)*10)/10"
        },
        {
          "type": "window",
          "sort": {
            "field": "start",
            "order": "ascending"
          },
          "ops": [
            "row_number",
            "row_number"
          ],
          "as": [
            "phaseSort",
            "id"
          ]
        },
        {
          "type": "formula",
          "as": "id",
          "expr": "length(data('input'))+datum.id+'^^^^^'"
        }
      ]
    },
    {
      "name": "collapsedPhases",
      "on": [
        {
          "trigger": "phaseClicked",
          "toggle": "phaseClicked"
        },
        {
          "trigger": "initPhaseState",
          "insert": "initPhaseState=='close'? data('phases'):null"
        },
        {
          "trigger": "closeAll",
          "remove": true
        },
        {
          "trigger": "closeAll",
          "insert": "data('phases')"
        },
        {
          "trigger": "openAll",
          "remove": true
        }
      ]
    },
    {
      "name": "phasePaths",
      "source": "phases",
      "transform": [
        {
          "type": "formula",
          "as": "phasePath",
          "expr": "'M ' + scale('x', datum.start)+' '  +   (scale('y', datum.id)+yPaddingInner) + ' H ' +  scale('x', datum.end)+' '   + ' v ' +  phaseSymbolHeight + ' L ' +  (scale('x', datum.end) - phaseSymbolWidth) +' '  +   (scale('y', datum.id)+yPaddingInner+phaseSymbolHeight/2 ) + ' L ' +  (scale('x', datum.start)+phaseSymbolWidth) + ' '  +   (scale('y', datum.id)+yPaddingInner+phaseSymbolHeight/2) + ' L ' +  (scale('x', datum.start)) + ' '  +   (scale('y', datum.id)+ yPaddingInner+phaseSymbolHeight) + ' z'"
        }
      ]
    },
    {
      "name": "tasks",
      "source": "input",
      "transform": [
        {
          "type": "filter",
          "expr": "datum.milestone != true"
        },
        {
          "type": "filter",
          "expr": "!indata('collapsedPhases', 'program', datum.program)"
        }
      ]
    },
    {
      "name": "milestones",
      "source": "input",
      "transform": [
        {
          "type": "filter",
          "expr": "datum.milestone == true"
        },
        {
          "type": "filter",
          "expr": "!indata('collapsedPhases', 'program', datum.program)"
        }
      ]
    },
    {
      "name": "xExt",
      "source": "input",
      "transform": [
        {
          "type": "extent",
          "field": "start"
        }
      ]
    },
    {
      "name": "yScale",
      "source": "input",
      "transform": [
        {
          "type": "aggregate",
          "groupby": ["program", "project"],
          "fields": ["program", "project"],
          "ops": ["distinct", "distinct"]
        },
        {
          "type": "window",
          "sort": [{"field": "program"}, {"field": "project"}],
          "frame": [null, null]
        }
      ]
    }
  ],
  "scales": [
    {
      "name": "x",
      "type": "time",
      "domain": {"signal": "xExt"},
      "range": [{"signal": "columnsWidth"}, {"signal": "width"}]
    },
    {
      "name": "y",
      "type": "band",
      "domain": {"data": "yScale", "field": "project"},
      "range": [0, {"signal": "data('yScale').length * yRowHeight"}],
      "padding": {"signal": "yPaddingInner"}
    },
    {
      "name": "color",
      "type": "ordinal",
      "domain": {"data": "input", "field": "program"},
      "range": {"signal": "coloursDark"}
    },
    {
      "name": "colorLight",
      "type": "ordinal",
      "domain": {"data": "input", "field": "program"},
      "range": {"signal": "coloursLight"}
    }
  ],
  "axes": [
    {
      "orient": "top",
      "scale": "x",
      "title": "Project Timeline",
      "titleColor": {"signal": "textColour"},
      "titleFontSize": 16,
      "titleFontWeight": "bold",
      "titlePadding": 15,
      "tickColor": {"signal": "gridColor"},
      "domainColor": {"signal": "gridColor"},
      "labelColor": {"signal": "textColour"},
      "labelFontSize": 12,
      "grid": true,
      "gridColor": {"signal": "gridColor"},
      "gridOpacity": 0.5
    }
  ],
  "marks": [
    {
      "type": "rect",
      "name": "background",
      "encode": {
        "enter": {
          "width": {"signal": "width"},
          "height": {"signal": "height"},
          "fill": {"value": "#ffffff"}
        }
      }
    },
    {
      "type": "rect",
      "name": "tableHeaders",
      "encode": {
        "enter": {
          "x": {"value": 0},
          "y": {"value": 0},
          "width": {"signal": "columnsWidth"},
          "height": {"value": 40},
          "fill": {"value": "#f8f9fa"},
          "stroke": {"value": "#dee2e6"},
          "strokeWidth": {"value": 1}
        }
      }
    },
    {
      "type": "text",
      "name": "taskHeader",
      "encode": {
        "enter": {
          "x": {"signal": "taskColumnWidth/2"},
          "y": {"value": 25},
          "text": {"value": "Project"},
          "fontSize": {"value": 13},
          "fontWeight": {"value": "bold"},
          "fill": {"signal": "textColour"},
          "textAnchor": {"value": "middle"}
        }
      }
    },
    {
      "type": "text",
      "name": "startHeader",
      "encode": {
        "enter": {
          "x": {"signal": "taskColumnWidth + startColumnWidth/2"},
          "y": {"value": 25},
          "text": {"value": "G0 Date"},
          "fontSize": {"value": 13},
          "fontWeight": {"value": "bold"},
          "fill": {"signal": "textColour"},
          "textAnchor": {"value": "middle"}
        }
      }
    },
    {
      "type": "text",
      "name": "endHeader",
      "encode": {
        "enter": {
          "x": {"signal": "taskColumnWidth + startColumnWidth + endColumnWidth/2"},
          "y": {"value": 25},
          "text": {"value": "G5 Date"},
          "fontSize": {"value": 13},
          "fontWeight": {"value": "bold"},
          "fill": {"signal": "textColour"},
          "textAnchor": {"value": "middle"}
        }
      }
    },
    {
      "type": "text",
      "name": "daysHeader",
      "encode": {
        "enter": {
          "x": {"signal": "taskColumnWidth + startColumnWidth + endColumnWidth + daysColumnWidth/2"},
          "y": {"value": 25},
          "text": {"value": "Days"},
          "fontSize": {"value": 13},
          "fontWeight": {"value": "bold"},
          "fill": {"signal": "textColour"},
          "textAnchor": {"value": "middle"}
        }
      }
    },
    {
      "type": "text",
      "name": "progressHeader",
      "encode": {
        "enter": {
          "x": {"signal": "taskColumnWidth + startColumnWidth + endColumnWidth + daysColumnWidth + progressColumnWidth/2"},
          "y": {"value": 25},
          "text": {"value": "Progress"},
          "fontSize": {"value": 13},
          "fontWeight": {"value": "bold"},
          "fill": {"signal": "textColour"},
          "textAnchor": {"value": "middle"}
        }
      }
    },
    {
      "type": "rect",
      "name": "rowBackgrounds",
      "from": {"data": "input"},
      "encode": {
        "enter": {
          "y": {"scale": "y", "field": "project"},
          "dy": {"value": 40},
          "height": {"signal": "yRowHeight"},
          "fill": {"value": "#ffffff"},
          "stroke": {"value": "#dee2e6"},
          "strokeWidth": {"value": 0.5}
        }
      }
    },
    {
      "type": "text",
      "name": "taskLabels",
      "from": {"data": "input"},
      "encode": {
        "enter": {
          "x": {"signal": "taskColumnWidth/2"},
          "y": {"scale": "y", "field": "project"},
          "dy": {"signal": "yRowHeight/2 + 40"},
          "text": {"field": "project"},
          "fontSize": {"value": 11},
          "fill": {"signal": "textColour"},
          "textAnchor": {"value": "middle"},
          "align": {"value": "center"}
        }
      }
    },
    {
      "type": "text",
      "name": "startLabels",
      "from": {"data": "input"},
      "encode": {
        "enter": {
          "x": {"signal": "taskColumnWidth + startColumnWidth/2"},
          "y": {"scale": "y", "field": "project"},
          "dy": {"signal": "yRowHeight/2 + 40"},
          "text": {"field": "g0Date"},
          "fontSize": {"value": 10},
          "fill": {"signal": "textColour"},
          "textAnchor": {"value": "middle"},
          "align": {"value": "center"}
        }
      }
    },
    {
      "type": "text",
      "name": "endLabels",
      "from": {"data": "input"},
      "encode": {
        "enter": {
          "x": {"signal": "taskColumnWidth + startColumnWidth + endColumnWidth/2"},
          "y": {"scale": "y", "field": "project"},
          "dy": {"signal": "yRowHeight/2 + 40"},
          "text": {"field": "g5Date"},
          "fontSize": {"value": 10},
          "fill": {"signal": "textColour"},
          "textAnchor": {"value": "middle"},
          "align": {"value": "center"}
        }
      }
    },
    {
      "type": "text",
      "name": "daysLabels",
      "from": {"data": "input"},
      "encode": {
        "enter": {
          "x": {"signal": "taskColumnWidth + startColumnWidth + endColumnWidth + daysColumnWidth/2"},
          "y": {"scale": "y", "field": "project"},
          "dy": {"signal": "yRowHeight/2 + 40"},
          "text": {"field": "days"},
          "fontSize": {"value": 10},
          "fill": {"signal": "textColour"},
          "textAnchor": {"value": "middle"},
          "align": {"value": "center"}
        }
      }
    },
    {
      "type": "text",
      "name": "progressLabels",
      "from": {"data": "input"},
      "encode": {
        "enter": {
          "x": {"signal": "taskColumnWidth + startColumnWidth + endColumnWidth + daysColumnWidth + progressColumnWidth/2"},
          "y": {"scale": "y", "field": "project"},
          "dy": {"signal": "yRowHeight/2 + 40"},
          "text": {"field": "completionLabel"},
          "fontSize": {"value": 10},
          "fill": {"signal": "textColour"},
          "textAnchor": {"value": "middle"},
          "align": {"value": "center"}
        }
      }
    },
    {
      "type": "rect",
      "name": "taskBars",
      "from": {"data": "input"},
      "encode": {
        "enter": {
          "x": {"scale": "x", "field": "start"},
          "y": {"scale": "y", "field": "project"},
          "dy": {"signal": "yPaddingInner/2 + 40"},
          "height": {"signal": "yRowHeight - yPaddingInner"},
          "fill": {"scale": "color", "field": "program"},
          "stroke": {"signal": "textColour"},
          "strokeWidth": {"value": 1},
          "cornerRadius": {"value": 4},
          "cursor": {"value": "pointer"}
        },
        "update": {
          "width": {"scale": "x", "field": "end"}
        }
      }
    },
    {
      "type": "rule",
      "name": "todayLine",
      "encode": {
        "enter": {
          "x": {"scale": "x", "signal": "today"},
          "y": {"value": 40},
          "y2": {"signal": "height"},
          "stroke": {"value": "#e74c3c"},
          "strokeWidth": {"value": 2},
          "strokeDash": {"value": [5, 5]},
          "opacity": {"value": 0.8}
        }
      }
    },
    {
      "type": "text",
      "name": "todayLabel",
      "encode": {
        "enter": {
          "x": {"scale": "x", "signal": "today"},
          "y": {"value": 55},
          "text": {"signal": "'Today: ' + todayRule"},
          "fontSize": {"value": 11},
          "fill": {"value": "#e74c3c"},
          "textAnchor": {"value": "middle"},
          "opacity": {"value": 0.8}
        }
      }
    }
  ]
} 